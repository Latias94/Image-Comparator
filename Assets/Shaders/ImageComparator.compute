//
// Image Comparator. Copyright (c) 2021-2021 Latias94 (www.frankorz.com). See LICENSE.md
// https://github.com/Latias94/UnityImageComparator/
//

#pragma kernel CSMain

// Compute Shader 也定义好相关的结构
struct CompareResult
{
    uint different;
};

shared Texture2D<float4> sourceTexture;
shared Texture2D<float4> compareTexture;
int bufferMaxWidth;

// RWStructuredBuffer 是可读写流
RWStructuredBuffer<CompareResult> resultBuffer;

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint textureWidth = sourceTexture.Length.x;
    uint textureHeight = sourceTexture.Length.y;

    for (uint x = 0; x < 8; x++)
    {
        for (uint y = 0; y < 8; y++)
        {
            uint2 textureIndex = uint2(id.x * 8 + x, id.y * 8 + y);
            if (textureIndex.x < textureWidth && textureIndex.y < textureHeight)
            {
                float4 sourcePixel = sourceTexture[textureIndex.xy];
                float4 comparePixel = compareTexture[textureIndex.xy];
                // 设定不同的相似度
                // float pixelDifference = 0.001f;
                // if (abs(sourcePixel.x - destPixel.x) > pixelDifference ||
                //     abs(sourcePixel.y - destPixel.y) > pixelDifference ||
                //     abs(sourcePixel.z - destPixel.z) > pixelDifference ||
                //     abs(sourcePixel.w - destPixel.w) > pixelDifference )
                // {
                //     differentBlock++;
                // }

                const uint bufferIndex = textureIndex.y * bufferMaxWidth + textureIndex.x;
                if (
                    sourcePixel.x != comparePixel.x ||
                    sourcePixel.y != comparePixel.y ||
                    sourcePixel.z != comparePixel.z ||
                    sourcePixel.w != comparePixel.w
                )
                {
                    // 左下角为原点
                    resultBuffer[bufferIndex].different = 1;
                }
                else
                {
                    resultBuffer[bufferIndex].different = 0;
                }
            }
        }
    }
}
